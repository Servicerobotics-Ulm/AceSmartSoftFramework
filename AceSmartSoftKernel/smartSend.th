// --------------------------------------------------------------------------
//
//  Copyright (C) 2002/2004/2008 Christian Schlegel
//                2009 Alex Lotz
//
//        lotz@hs-ulm.de
//        schlegel@hs-ulm.de
//
//        Prof. Dr. Christian Schlegel
//        University of Applied Sciences
//        Prittwitzstr. 10
//        D-89075 Ulm
//        Germany
//
//
//  This file is part of ACE/SmartSoft.
//
//  ACE/SmartSoft is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  ACE/SmartSoft is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with ACE/SmartSoft.  If not, see <http://www.gnu.org/licenses/>.
//
// --------------------------------------------------------------------------

#include <sstream>


/////////////////////////////////////////////////////////////////////////
//
// client part of send template
//
/////////////////////////////////////////////////////////////////////////


//
// static handle method called by ACE
//
//<alexej date="2010-03-18">
template<class C> void SmartACE::SendClient<C>::hndAckConn(void *ptr, int cid, int status)
//</alexej>
{
  SendClient<C> *lthis = (SendClient<C> *)ptr;

  lthis->monitorConnect.signal(cid, status);
}

//
// static handle method called by ACE object
//
//<alexej date="2010-03-18">
template<class C> void SmartACE::SendClient<C>::hndServDisc(void* ptr, int cid)
//</alexej>
{
  SendClient<C> *lthis = (SendClient<C> *)ptr;

  lthis->component->enqueue(ptr,
      &SendClient<C>::internalServerInitiatedDisconnect,
      cid);
}

//
// static handle method called by ACE object
//
template<class C> void SmartACE::SendClient<C>::hndAckDisc(void* ptr)
{
   SendClient<C> *lthis = (SendClient<C> *)ptr;

   lthis->monitorDisconnect.signal();
}


//
// static internal interface methods used by wiring service
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::internalConnect(void *ptr,const std::string & srv, const std::string & svc)
{
  SendClient<C>* lthis = (SendClient<C> *)ptr;

  return lthis->connect(srv,svc);
}

template<class C> Smart::StatusCode SmartACE::SendClient<C>::internalDisconnect(void *ptr)
{
  SendClient<C>* lthis = (SendClient<C> *)ptr;

  return lthis->disconnect();
}

//<alexej date="2010-03-18">
template<class C>
void SmartACE::SendClient<C>::internalServerInitiatedDisconnect(void *ptr, int cid)
//</alexej>
{
   SendClient<C> *lthis = (SendClient<C> *)ptr;

   lthis->mutexConnection.acquire();
      if(cid == lthis->connectionID)
      {
         lthis->disconnect();
      }
   lthis->mutexConnection.release();
}


//
// default constructor
//
template<class C> inline SmartACE::SendClient<C>::SendClient(void) 
:	Smart::ISendClientPattern<C>(0)
{
  std::cerr << "CommPattern (sendClient): ERROR: Entered default constructor SendClient" << std::endl;

  throw(SmartACE::SmartError(Smart::SMART_ERROR,"CommPattern (sendClient): ERROR: Entered default constructor SendClient"));
}

//
// standard constructor port
//
template<class C> inline SmartACE::SendClient<C>::SendClient(SmartComponent *m,const std::string &port,SmartACE::WiringSlave *slave) 
:	Smart::ISendClientPattern<C>(m)
{
  Smart::StatusCode status;

  // set the configuration flags appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = port;
  component         = m;
  wiringslave       = slave;
  serverProxy       = 0;

  // set monitors to be controlled by the component
  component->addSmartMonitor(&monitorConnect);
  component->addSmartMonitor(&monitorDisconnect);

  // set a default timeout value of one second for every connection procedure
  monitorConnect.enableTimedMode(ACE_Time_Value(1));

  //<alexej date="21.11.2008">
   // initialize ServerInitiated Monitoring
   connectionID = 0;
   component->sign_on((void*)this);

   // initialize new Connector instance
   connector = new SendClientConnector(component->getReactorTask()->getImpl());
   //serverProxy will be initialized later - on connect
  //</alexej>

  status = this->add(slave, port);

  if (status == Smart::SMART_PORTALREADYUSED) {
    //
    // port name already in use therefore throw exception
    //
    throw(SmartACE::SmartError(Smart::SMART_PORTALREADYUSED,"CommPattern (sendClient): ERROR: port name already in use"));
  } else if (status != Smart::SMART_OK) {
    //
    // throw exception since something went wrong
    //
    throw(SmartACE::SmartError(status,"CommPattern (sendClient): ERROR: something went wrong"));
  }
}

//
// standard constructor
//
template<class C> inline SmartACE::SendClient<C>::SendClient(SmartComponent *m) 
:	Smart::ISendClientPattern<C>(m)
{
  // set the configuration flags approriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = "";
  component         = m;
  wiringslave       = 0;
  serverProxy       = 0;

  // set monitors to be controlled by the component
  component->addSmartMonitor(&monitorConnect);
  component->addSmartMonitor(&monitorDisconnect);

  // set a default timeout value of one second for every connection procedure
  monitorConnect.enableTimedMode(ACE_Time_Value(1));

  //<alexej date="21.11.2008">
   // initialize ServerInitiated Monitoring
   connectionID = 0;
   component->sign_on((void*)this);

   // initialize new Connector instance
   connector = new SendClientConnector(component->getReactorTask()->getImpl());
   //serverProxy will be initialized later - on connect
  //</alexej>

}

//
// standard constructor already wired
//
template<class C> inline SmartACE::SendClient<C>::SendClient(SmartComponent *m,const std::string &srv,const std::string &svc) 
:	Smart::ISendClientPattern<C>(m,srv,svc)
{
  Smart::StatusCode status;
  int flag;

  // set the configuration flags appropriately
  statusConnected   = 0;
  statusManagedPort = 0;
  portname          = "";
  component         = m;
  wiringslave       = 0;
  serverProxy       = 0;

  // set monitors to be controlled by the component
  component->addSmartMonitor(&monitorConnect);
  component->addSmartMonitor(&monitorDisconnect);

  // set a default timeout value of one second for every connection procedure
  monitorConnect.enableTimedMode(ACE_Time_Value(1));

  //<alexej date="21.11.2008">
   // initialize ServerInitiated Monitoring
   connectionID = 0;
   component->sign_on((void*)this);

   // initialize new Connector instance
   connector = new SendClientConnector(component->getReactorTask()->getImpl());
   //serverProxy will be initialized later - on connect
  //</alexej>


  // Now connect to the server side of the send pattern
  //std::cout << "Try to connect to (" << srv << ":send:" << svc << ") ..." << std::endl;
  SMARTSOFT_PRINT(ACE_TEXT("Try to connect to (%s:SendServer<%s>:%s) ...\n"), srv.c_str(), C::identifier().c_str(), svc.c_str() );

  do {
    status = this->connect(srv,svc);

    if (status == Smart::SMART_OK) {
      flag  = 1;
      //std::cout << "... connected to (" << srv << ":send:" << svc << ")" << std::endl;
      SMARTSOFT_PRINT(ACE_TEXT("... connected to (%s:SendServer<%s>:%s)\n"), srv.c_str(), C::identifier().c_str(), svc.c_str() );
    } else if (status == Smart::SMART_SERVICEUNAVAILABLE) {
      //std::cout << "CommPattern (SendClient): INFO: not yet found in naming service ..." << std::endl;
      SMARTSOFT_PRINT(ACE_TEXT("CommPattern (SendClient): INFO: not yet found in naming service ...\n") );
      ACE_OS::sleep(1);
      flag  = 0;
    } else if (status == Smart::SMART_INCOMPATIBLESERVICE) {
      //std::cout << "CommPattern (SendClient): ERROR: incompatible service ..." << std::endl;
      SMARTSOFT_PRINT(ACE_TEXT("CommPattern (SendClient): ERROR: incompatible service ...\n") );
      flag  = 1;
      throw(SmartACE::SmartError(status,"CommPattern (SendClient): ERROR: incompatible service"));
    } else {
      //<alexej date="2009-10-14">
      //std::cout << "CommPattern (SendClient): ERROR: something went wrong ..." << std::endl;
      SMARTSOFT_PRINT(ACE_TEXT("CommPattern (SendClient): ERROR: something went wrong ...\n") );
      flag = 1;
      throw(SmartACE::SmartError(status,"CommPattern (SendClient): ERROR: something went wrong"));
      //</alexej>
    };
  } while (flag == 0);
}

//
// destructor
//
template<class C> inline SmartACE::SendClient<C>::~SendClient(void) 
{
  //
  // remove port from managed set of ports and disconnect from server even if not
  // exposed as port or connected to a server since this is handled correctly inside
  // remove() and disconnect()
  //
  this->remove();
  this->disconnect();

  //<alexej date="2009-04-23">
  mutexConnection.acquire();
    // sign off ServerInitiated disconnect monitoring
    component->sign_off((void*)this);

    // shut down connector
    connector->close();
    delete connector;
  mutexConnection.release();

  component->removeSmartMonitor(&monitorConnect);
  component->removeSmartMonitor(&monitorDisconnect);
  //</alexej>

  // client does not bind object at naming service,
  // therefore no unbind of objects needed here
}

//
//
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::add(SmartACE::WiringSlave *slave, const std::string &port) 
{
  Smart::StatusCode status;

  mutexConnection.acquire();

  // first remove eventually valid registration
  this->remove();

  // now add client
  portname          = port;
  statusManagedPort = 1;

  wiringslave = slave;
  status      = this->wiringslave->add(port, (void*)this, &SendClient<C>::internalConnect, &SendClient<C>::internalDisconnect);

  mutexConnection.release();

  return status;
}

//
//
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::remove() 
{
  Smart::StatusCode status;

  mutexConnection.acquire();

  if (statusManagedPort == 1) {
    status = this->wiringslave->remove(portname);

    portname          = "";
    statusManagedPort = 0;

  } else {
    status = Smart::SMART_OK;
  }

  mutexConnection.release();

  return status;
}

//
//
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::connect(const std::string &srv, const std::string &svc) 
{
   Smart::StatusCode result;

   result = Smart::SMART_ERROR;

   mutexConnection.acquire();

   this->disconnect();

   /** Possible Return values:
   * OK -> SMART_OK:	connection established
   * service unavailable: SMART_SERVICEUNAVAILABLE
   * service incompatible: naming service
   * communication error: SMART_ERROR_COMMUNICATION
   * unknown error: SMART_ERROR
   * */

	SmartACE::NSValueType value;

   if(component->getName().compare(SMART_NONS) == 0)
   {
      ACE_INET_Addr conn_addr;
      if( conn_addr.string_to_addr(svc.c_str()) == 0) {
         if(srv.compare(SMART_NONS) != 0) {
            SMARTSOFT_PRINT( ACE_TEXT("- <SendClient> Warning: no naming service used so SERVER parameter of connect will be ignored!\n") );
         }
         value.setInetAddr(conn_addr);
         result = Smart::SMART_OK;
      }
   }
   else
   {
	   SmartACE::NSKeyType key;
	   key.names[SmartACE::NSKeyType::COMP_NAME] = srv.c_str();
	   key.names[SmartACE::NSKeyType::PATTERN_NAME] = ACE_TEXT("Send");
	   key.names[SmartACE::NSKeyType::SERVICE_NAME] = svc.c_str();
	   key.names[SmartACE::NSKeyType::COMMOBJ1_NAME] = C::identifier().c_str();

      if( SmartACE::NAMING::instance()->resolve(key, value) == 0 )
      {
         result = Smart::SMART_OK;
      } else {
         // name is NOT available in naming service -> check whether similar name is available (with a different communication object)
         SmartACE::NSKeyType searchPattern;
         searchPattern.names[SmartACE::NSKeyType::COMP_NAME] = srv.c_str();
         searchPattern.names[SmartACE::NSKeyType::PATTERN_NAME] = ACE_TEXT("Send");
         searchPattern.names[SmartACE::NSKeyType::SERVICE_NAME] = svc.c_str();

         ACE_Unbounded_Queue<SmartACE::NSKeyType> similar_names = SmartACE::NAMING::instance()->getEntriesForMatchingPattern(searchPattern);
         if( similar_names.size() > 0 )
         {
            // a similar service is available, but is incompatible
            result = Smart::SMART_INCOMPATIBLESERVICE;
         } else {
            // neither exact service available nor similar service found -> service is completely missing
            result = Smart::SMART_SERVICEUNAVAILABLE;
         }
      }
   }

   if( result == Smart::SMART_OK )
   {
      ACE_Time_Value timeout(1);
      ACE_Synch_Options options(ACE_Synch_Options::USE_TIMEOUT, timeout);

      ACE_NEW_RETURN(serverProxy, SendClientServiceHandler(component->getReactorTask()->getImpl()), Smart::SMART_ERROR_COMMUNICATION);

      serverProxy->setCallbackFkts((void *)this,
         &SendClient<C>::hndAckConn,
         &SendClient<C>::hndServDisc,
         &SendClient<C>::hndAckDisc);

      if (connector->connect (serverProxy, value.getInetAddr(), options) == -1) {
         if(errno == ECONNREFUSED || errno == ETIME || errno == EWOULDBLOCK) {
            // remote acceptor is not available or ping times are too large
            result = Smart::SMART_ERROR_COMMUNICATION;
         }else{
            result = Smart::SMART_ERROR;
         }
         serverProxy->trigger_shutdown();
      }
      else
      {
         // acquire monitor recursive-mutex
         monitorConnect.acquire();

         // increment current connection-id;
         connectionID++;

         // reset connection monitor
         monitorConnect.prepare(connectionID);

         // send connection id to server
         result = serverProxy->connect( connectionID, value.getUUID() );

         // if connection is performed out of main function (main thread)
         // it can happen, that reactor is not running till now and
         // thus no CONN_ACK can be received so special treatment is necessary
         if(result == Smart::SMART_OK)
         {
            // wait on incomming connection for a period of time
            result = monitorConnect.wait(); 
         }


         if(result == Smart::SMART_OK) {
            if( static_cast<Smart::StatusCode>(monitorConnect.getStatusA0()) == Smart::SMART_OK)
            {
               // connection successfull
               statusConnected = 1;

               SmartACE::NSKeyType key;
               key.names[SmartACE::NSKeyType::COMP_NAME] = component->getName().c_str();
               key.names[SmartACE::NSKeyType::PATTERN_NAME] = ACE_TEXT("Send");
               key.names[SmartACE::NSKeyType::SERVICE_NAME] = ACE_TEXT("Client");
               key.names[SmartACE::NSKeyType::COMMOBJ1_NAME] = C::identifier().c_str();
               ACE_TString name = key;

               SMARTSOFT_PRINT( ACE_TEXT("- %s connected to <%s:%d>\n"), name.c_str(), value.getInetAddr().get_host_addr(), value.getInetAddr().get_port_number() );
               result = Smart::SMART_OK;
            }else{
               // connection rejected by the server due to server not ready or wrong "session-identifier"
               result = Smart::SMART_SERVICEUNAVAILABLE;
            }
         } else if(result == Smart::SMART_TIMEOUT || result == Smart::SMART_ERROR) {
            // on timeout discard the connection
            serverProxy->discard();

            serverProxy->trigger_shutdown();
            result = Smart::SMART_SERVICEUNAVAILABLE;
         } else {
            result = Smart::SMART_ERROR_UNKNOWN;
         }

         monitorConnect.release();
      } // end if(connector->connect==0)
   }
   //</alexej>

   mutexConnection.release();

   return result;
}

//
//
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::disconnect() 
{
  Smart::StatusCode result;

  mutexConnection.acquire();

  if (statusConnected == 0) {
    result = Smart::SMART_OK;
  } else {
    statusConnected = 0;

    //
    // now send disconnect message to server
    //
    result = Smart::SMART_OK;

    //<alexej date="02.10.2008">
    //
    //
    //
    monitorDisconnect.acquire();
       //
       // reset condition variable with pseudo cid (not really needen in disconnect)
       //
       monitorDisconnect.prepare();

       //
       // send disconnect message to server
       //
       result = serverProxy->disconnect();

       //
       // now wait for acknowledge-disconnect message
       //
       if(result == Smart::SMART_OK) 
       {
          // wait on incomming connection for a period of time
          result = monitorDisconnect.wait(); 
       } else {
          result = Smart::SMART_ERROR_COMMUNICATION;
       }

       //
       // free the memory
       //
       serverProxy->trigger_shutdown();

    //
    //
    //
    monitorDisconnect.release();
    //</alexej>
  }

  mutexConnection.release();

  return result;
}

//
//
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::blocking(const bool b) 
{
  return Smart::SMART_OK;
}

//
//
//
template<class C> Smart::StatusCode SmartACE::SendClient<C>::send(const C &c) 
{
  Smart::StatusCode result = Smart::SMART_OK;

  mutexConnection.acquire();

  if (statusConnected == 0) {
    //
    // no connection available
    //
    result = Smart::SMART_DISCONNECTED;

    mutexConnection.release();

    return result;
  }

  result = Smart::SMART_OK;

  //<alexej date="02.10.2008">
  ACE_OutputCDR cdr(ACE_DEFAULT_CDR_BUFSIZE);
  cdr << c;

  //
  // send message content to server
  //
  result = serverProxy->command(cdr.begin());

  //</alexej>
  mutexConnection.release();

  return result;
}


/////////////////////////////////////////////////////////////////////////
//
// server part of send template
//
/////////////////////////////////////////////////////////////////////////

//
// static handle method called by ACE ServiceHandler(SendServerServiceHandler) object
//
template<class C> void SmartACE::SendServer<C>::hndCmd(void *ptr, const SmartMessageBlock *user)
{
  SendServer<C>* lthis = (SendServer<C> *)ptr;

  //
  // Create CommunicationObject
  //
  C c;

  //
  // Fill communication object with message data
  //
  ACE_InputCDR cdr(user);
  cdr >> c;

  //
  // now call user provided handle method
  //
  lthis->handleSend(c);
}

//
// static handle method called by ACE object
//
//<alexej date="2010-03-18">
template<class C> void SmartACE::SendServer<C>::hndConnect(void* ptr, const SendServerServiceHandler *client, int cid, const ACE_Utils::UUID &serviceID)
//</alexej>
{
   SendServer<C>* lthis = (SendServer<C> *)ptr;
   SendClientList* cptr;
   SendServerServiceHandler *client_ptr;

   lthis->mutexClientList.acquire();

   client_ptr = const_cast<SendServerServiceHandler*>(client);

   if (lthis->serverReady == 0) {
      //
      // don't accept any new clients since server is in process of destruction or not yet ready
      //
      client_ptr->acknowledgmentConnect(cid, Smart::SMART_SERVICEUNAVAILABLE);
   } else {

      if( serviceID != *(lthis->service_identifier) ) {
         // reject connection due to wrong service-identifier
         // this is the case if naming-service entries are out-dated
         client_ptr->acknowledgmentConnect(cid, Smart::SMART_SERVICEUNAVAILABLE);
      } else if( client_ptr->acknowledgmentConnect(cid, Smart::SMART_OK) == Smart::SMART_OK ) {
         // Acknowledgement successfully transmitted, now add client to the list

         //
         // make new client list entry
         //
         cptr           = new SendClientList;

         //<alexej date="13.11.2008">
         //cptr->client   = SmartSendClientPattern::_duplicate(client); //old

         //better: cptr->clientProxy has to be const itself (not cast to not const)
         cptr->clientProxy = client_ptr;
         cptr->connection_id = cid;
         //</alexej>

         cptr->next     = lthis->clients;
         lthis->clients = cptr;
      }
   }

   lthis->mutexClientList.release();
}


//
// static handle method called by ACE object
//
template<class C> void SmartACE::SendServer<C>::hndDiscard(void* ptr, const SendServerServiceHandler *client)
{
   SendServer<C>* lthis = (SendServer<C> *)ptr;
   SendClientList* cptr = 0;
   SendClientList* hcptr = 0;

   lthis->mutexClientList.acquire();

   //
   // first remove entries from head as long as they match the client object
   //
   while ( (lthis->clients != 0) && (client == lthis->clients->clientProxy) )
   {
      // iterate to the next element in the list
      cptr = lthis->clients;
      lthis->clients = lthis->clients->next;

      // clean up current node
      //cptr->clientProxy->close(1);
      delete cptr;
   }

   //
   // now search through the rest of the list which might be empty already. If the
   // length is greater than zero, than the first element never matches and never
   // gets deleted
   //
   cptr = lthis->clients;
   if (cptr == 0) {
      // list contains no element anymore => ready
   } else {
      // list can now contain one or more elements with the first element matching never
      while (cptr->next != 0) {
         if ( client == cptr->next->clientProxy ) {
            hcptr      = cptr->next;
            cptr->next = cptr->next->next;
            // clean up current node
            //hcptr->clientProxy->close(1);
            delete hcptr;
         } else {
            cptr = cptr->next;
         }
      }
   }

   if (lthis->serverReady == 0) {
      // If the server is not ready yet the monitor-signal has no effect.
      // If server is in process of destruction then the monitor is signalled
      // to release the destructor of the server.
      if(lthis->clients == 0) {
         lthis->monitorServerInitiatedDisconnect.broadcast();
      }
   }

   lthis->mutexClientList.release();
}


//
// static handle method called by ACE object
//
template<class C> void SmartACE::SendServer<C>::hndDisconnect(void* ptr, const SendServerServiceHandler *client)
{
   SendServer<C>* lthis  = (SendServer<C> *)ptr;
   SendClientList* cptr  = 0;
   SendClientList* hcptr = 0;

   lthis->mutexClientList.acquire();

   //
   // remove client from list of clients
   //

   //
   // first remove entries from head as long as they match the client object
   //
   while ( (lthis->clients != 0) && (client == lthis->clients->clientProxy) )
   {
      cptr = lthis->clients;
      lthis->clients = lthis->clients->next;
      // acknowledge disconnect
      if( cptr->clientProxy->acknowledgmentDisconnect() == Smart::SMART_OK ) {
         // clean up current node
         cptr->clientProxy->trigger_shutdown();
         delete cptr;
      }
   }

   //
   // now search through the rest of the list which might be empty already. If the
   // length is greater than zero, than the first element never matches and never
   // gets deleted
   //
   cptr = lthis->clients;
   if (cptr == 0) {
      // list contains no element anymore => ready
   } else {
      // list can now contain one or more elements with the first element matching never
      while (cptr->next != 0) {
         if ( client == cptr->next->clientProxy ) {
            hcptr      = cptr->next;
            cptr->next = cptr->next->next;
            // acknowledge disconnect
            if( hcptr->clientProxy->acknowledgmentDisconnect() == Smart::SMART_OK ) {
               // clean up current node
               hcptr->clientProxy->trigger_shutdown();
               delete hcptr;
            }
         } else {
            cptr = cptr->next;
         }
      }
   }

   if (lthis->serverReady == 0) {
      // If the server is not ready yet the monitor-signal has no effect.
      // If server is in process of destruction then the monitor is signalled
      // to release the destructor of the server.
      if(lthis->clients == 0) {
         lthis->monitorServerInitiatedDisconnect.broadcast();
      }
   }

   lthis->mutexClientList.release();
}
//</alexej>



//
// default constructor
//
template<class C> inline SmartACE::SendServer<C>::SendServer(void) 
{
  std::cerr << "CommPattern (sendServer): ERROR: Entered default constructor SendServer" << std::endl;

  throw(SmartACE::SmartError(Smart::SMART_ERROR,"CommPattern (sendServer): ERROR: Entered default constructor"));
}

//
// standard constructor
//
template<class C> inline SmartACE::SendServer<C>::SendServer(SmartComponent *component,
                                                        const std::string &svc, ISendServerHandlerPtr handler) 
  : ISendServerBase(component,svc,handler),
    uuid_genrator(),
    service_identifier(0),
    component(component),
    service(svc),
    serverReady(0)
{
   mutexClientList.acquire();

   // reset list and other stuff
   clients = 0;

   component->addSmartMonitor(&monitorServerInitiatedDisconnect);

   //<alexej date="06.11.2008" description="CORBA Servant is replaced by ACE_Acceptor here." />
   acceptor = new SendServerAcceptor
      (
         (void *)this,
         &SendServer<C>::hndCmd,
         &SendServer<C>::hndConnect,
         &SendServer<C>::hndDiscard,
         &SendServer<C>::hndDisconnect,
         component->getReactorTask()->getImpl()
      );


   // local variables
   bool use_ns = true;
   Smart::StatusCode result = Smart::SMART_OK;

   SmartACE::NSKeyType key;
   key.names[SmartACE::NSKeyType::COMP_NAME] = component->getName().c_str();
   key.names[SmartACE::NSKeyType::PATTERN_NAME] = ACE_TEXT("Send");
   key.names[SmartACE::NSKeyType::SERVICE_NAME] = service.c_str();
   key.names[SmartACE::NSKeyType::COMMOBJ1_NAME] = C::identifier().c_str();
   ACE_TString name = key; // get string representation of the key

   SmartACE::NSValueType value;

   if(component->getName().compare(SMART_NONS) == 0)
   {
      ACE_INET_Addr addr_to_listen;
      if(addr_to_listen.string_to_addr(svc.c_str()) == 0) {
         use_ns = false;
         value.setInetAddr(addr_to_listen);
      } else {
         result = Smart::SMART_ERROR;
      }
   }

   if(result == Smart::SMART_OK)
   {
      if( acceptor->open (value.getInetAddr(), component->getReactorTask()->getImpl()) == 0 ) {
         // acceptor successfull opened
         // get the real inet adress
         ACE_INET_Addr addr_to_listen;
         if( acceptor->acceptor().get_local_addr(addr_to_listen) == 0 ) {
            if(use_ns) {
               // temporary dummy variable
               SmartACE::NSValueType dummy;

               // check if port is already used
               if( SmartACE::NAMING::instance()->resolve(key, dummy) == 0 ) {
                  SMARTSOFT_PRINT(ACE_TEXT("- %s is already in use - will be rebound silently.\n"), name.c_str() );
                  result = Smart::SMART_PORTALREADYUSED;
               }

               //<alexej date="2010-03-18">
               uuid_genrator.init();
               service_identifier = uuid_genrator.generate_UUID();
               //</alexej>
               value.set(addr_to_listen, *service_identifier);

               if( SmartACE::NAMING::instance()->rebind(key, value) == 0 ) {
                  serverReady = 1;
                  SMARTSOFT_PRINT( ACE_TEXT("- %s is ready and running on address: <%s:%d>\n"), name.c_str(), addr_to_listen.get_host_addr(), addr_to_listen.get_port_number() );
               }else{
                  SMARTSOFT_PRINT( ACE_TEXT("- %s rebinding error!"), name.c_str() );
               }

            }else{
               serverReady = 1;
               SMARTSOFT_PRINT( ACE_TEXT("- %s is ready and running on address: <%s:%d>\n"), name.c_str(), addr_to_listen.get_host_addr(), addr_to_listen.get_port_number() );
            }
         } // end if(use_ns)
      } // end if(acceptor->get_local_addr() == 0)
   } // end if(result == Smart::SMART_OK)
  //</alexej>


  mutexClientList.release();
}

//
// default destructor
//
template<class C> inline SmartACE::SendServer<C>::~SendServer(void) 
{
	this->serverInitiatedDisconnect();

  // - since clients are now all disconnected, finally no more new requests are received
  // - it might be the case that however still some passive handlers are executed. Since
  //   their clients are however properly disconnected this does not matter anymore
  // - active handlers might try to provide answers after this server has been destroyed.
  //   It is the responsibility of the user to avoid this !

  // unbind at naming service

  //<alexej date="2010-03-18">
  if(component->getName().compare(SMART_NONS) != 0)
  {
      SmartACE::NSKeyType key;
      key.names[SmartACE::NSKeyType::COMP_NAME] = component->getName().c_str();
      key.names[SmartACE::NSKeyType::PATTERN_NAME] = ACE_TEXT("Send");
      key.names[SmartACE::NSKeyType::SERVICE_NAME] = service.c_str();
      key.names[SmartACE::NSKeyType::COMMOBJ1_NAME] = C::identifier().c_str();

      SmartACE::NAMING::instance()->unbind(key);
  }
  
  acceptor->close();
  delete acceptor;

  if(service_identifier != 0)
     delete service_identifier;
  //</alexej>
}

template<class C> inline void SmartACE::SendServer<C>::serverInitiatedDisconnect()
{
	  SendClientList *cptr = 0;
	  SendClientList* prevcptr = 0;

	  mutexClientList.acquire();
	  //
	  // since we now have the mutex, connects and disconnects from clients can not be
	  // executed while modifying the server state to serverReady = 0. From now on any
	  // tries to connect to this server are rejected
	  //
	  serverReady = 0;

	  monitorServerInitiatedDisconnect.reset();

	  acceptor->close_handler();

	  cptr = clients;
	  while (cptr != 0) {
	    if( cptr->clientProxy->serverInitiatedDisconnect( cptr->connection_id ) != Smart::SMART_OK )
	    {
	      // clientProxy could not communicate SID message.
	      // The reason can be that the connection is broken or a communication error occured.
	      // Since we are now in the destructor, it is safe to just remove this reference.
	      if(clients == cptr) {
	        // the current cptr is the first element
	        // we will remove the first element, so set the clients pointer to the next lement
	        clients = clients->next;
	        // clean up
	        cptr->clientProxy->trigger_shutdown();
	        delete cptr;
	        // set the current pointer to the beginning of the list
	        cptr = clients;
	      } else {
	        // cptr points NOT to the first element in the list
	        prevcptr->next = cptr->next;
	        cptr->clientProxy->trigger_shutdown();
	        delete cptr;
	        cptr = prevcptr->next;
	      }
	    } else {
	      prevcptr = cptr;
	      cptr = cptr->next;
	    }
	  }

	  if(clients == 0) {
	     monitorServerInitiatedDisconnect.broadcast();
	  }

	  mutexClientList.release();

	  //
	  // - pending disconnects from clients can now get the mutexClientList and can
	  //   therefore execute their disconnect
	  // - since serverReady == 0, from now on all modifications on the list of clients
	  //   are rejected inside the disconnect handler
	  // - therefore one can step through the list of clients without requiring to hold
	  //   the mutexClientList and can call disconnect at the client side
	  // - the server has to call the client's disconnect outside the mutexClientList since
	  //   the client calls back the server within the disconnect member function and the
	  //   server handler requires the mutexClientList
	  // - Concurrent calls to the client's disconnect member function from this server
	  //   and from the client are not critical since disconnects are executed sequentially
	  //   in the client due to the client's mutexConnection
	  //

	  //<alexej date="02.10.2008">
	  monitorServerInitiatedDisconnect.wait();
	  component->removeSmartMonitor(&monitorServerInitiatedDisconnect);
	  //</alexej>
}

